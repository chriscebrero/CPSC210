package ca.ubc.cpsc210.bank;import ca.ubc.cpsc210.bank.exceptions.IllegalValueException;import ca.ubc.cpsc210.bank.exceptions.NotEnoughMoneyException;// invariant: getBalance() >= 0public class RobustAccount {	private static int nextAccountId = 1;  // tracks id of next account created	private int id;                        // account id	private String name;                   // the account owner name	private double balance;                // the current balance of the account	/*	 * Constructor: initializes an account	 * 	 * EFFECTS: if accountName has non-zero length then a new account is created,	 * 			otherwise an IllegalValueException is thrown.  	 * 			The name on account is set to accountName; account id is a	 *          positive integer not assigned to any other account;	 *          if initialBalance >= 0 then balance on account is set to	 *          initialBalance, otherwise balance is zero.	 */	public RobustAccount(String accountName, double initialBalance) throws IllegalValueException {		if (accountName.length() == 0) 			throw new IllegalValueException("Length of account name is zero.");		id = nextAccountId++;		name = accountName;		if (initialBalance >= 0)			balance = initialBalance;		else			balance = 0;				hasValidState();	}	public int getId() {		return id;	}	public String getName() {		return name;	}	public double getBalance() {		return balance;	}	/*	 * Deposit money into the account	 * 	 * MODIFIES: this	 * EFFECTS: if amount >= 0, amount is added to balance and updated	 * 			balance is returned, otherwise IllegalValueException	 * 			is thrown	 */	public double deposit(double amount) throws IllegalValueException {		hasValidState();		if (amount < 0) 		    throw new IllegalValueException("Cannot deposit negative amount: " + amount);		balance = balance + amount;		hasValidState();		return balance;	}	/*	 * Withdraw money from the account	 *	 * MODIFIES: this	 * EFFECTS: if amount >= 0 and getBalance() >= amount then amount	 *          is withdrawn from account and updated balance is returned;	 *          otherwise if amount < 0, IllegalValueException is thrown;	 *          otherwise if getBalance() < amount, NotEnoughMoneyException	 *          is thrown.	 */	public double withdraw(double amount) throws IllegalValueException,			NotEnoughMoneyException {		hasValidState();		if (amount < 0)			throw new IllegalValueException("Cannot withdraw negative amount: " + amount);		if (balance - amount < 0) 			throw new NotEnoughMoneyException("Insufficient funds: balance: " + balance + ", requested: " + amount);		balance = balance - amount;		hasValidState();		return balance;	}	/*	 * Returns the string representation of an account	 * 	 * EFFECTS: returns a string representation of account	 */	public String toString() {		return "[ id = " + id + ",    name = " + name + ",     balance = "				+ balance + "]";	}		/*	 * Invariant checker	 * 	 * EFFECTS: throws AssertionError if invariant does not hold	 *	 * Note: assertions must be enabled in JVM, otherwise method has no effect.	 */	private void hasValidState() {		assert( getBalance() >= 0 );	}}